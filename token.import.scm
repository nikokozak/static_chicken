;;;; token.import.scm - GENERATED BY CHICKEN 5.2.0 -*- Scheme -*-

(##sys#with-environment
  (lambda ()
    (scheme#eval
      '(import-syntax
         scheme
         chicken.module
         chicken.base
         chicken.syntax
         records
         (only chicken.format fprintf)))
    (##core#begin
      (define (accessor-defs-for name struct fields)
        (cond ((null? fields) '())
              (else
               (cons `(define ,(symbol-append name '- (car fields))
                        (getter-with-setter
                          (record-accessor ,struct ',(car fields))
                          (record-modifier ,struct ',(car fields))))
                     (accessor-defs-for name struct (cdr fields)))))))
    (##core#begin
      (define (accessors-for name fields var)
        (cond ((null? fields) '())
              (else
               (cons `(,(symbol-append name '- (car fields)) x)
                     (accessors-for name (cdr fields) var))))))
    (##core#begin
      (define (format-string name fields)
        (let ((field-length (length fields)))
          (letrec ((draw-s
                     (lambda (fields-left)
                       (if (= 0 fields-left)
                         ""
                         (string-append "~s " (draw-s (sub1 fields-left)))))))
            (string-append
              "#("
              (symbol->string name)
              " "
              (draw-s field-length)
              ")")))))
    (##sys#register-compiled-module
      'token
      'token
      (scheme#list '(* . scheme#*))
      '((record-modifier . records#record-modifier)
        (record-accessor . records#record-accessor)
        (record-constructor . records#record-constructor)
        (record-predicate . records#record-predicate)
        (make-record-type . records#make-record-type)
        (fprintf . chicken.format#fprintf))
      (scheme#list
        (scheme#cons
          'make-token
          (er-macro-transformer
            (lambda (expr replace compare?)
              (let* ((capitalize-symbol
                       (lambda (symb)
                         (string->symbol
                           (list->string
                             (map char-upcase
                                  (string->list (symbol->string symb)))))))
                     (downcase-symbol
                       (lambda (symb)
                         (string->symbol
                           (list->string
                             (map char-downcase
                                  (string->list (symbol->string symb)))))))
                     (name (cadr expr))
                     (upcase (capitalize-symbol (cadr expr)))
                     (downcase (downcase-symbol (cadr expr)))
                     (fields (cddr expr))
                     (token-printer
                       `(lambda (x out)
                          (fprintf
                            out
                            ,(format-string downcase fields)
                            ,@(accessors-for downcase fields 'x)))))
                `(begin
                   (define ,upcase (make-record-type ',downcase '(,@fields)))
                   (define ,name (record-constructor ,upcase))
                   (define ,(symbol-append downcase '-token?)
                     (record-predicate ,upcase))
                   ,@(accessor-defs-for downcase upcase fields)
                   (set-record-printer! ',downcase ,token-printer)))))))
      (scheme#list))))

;; END OF FILE
